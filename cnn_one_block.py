# -*- coding: utf-8 -*-
"""CNN_one_block.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17dCcLXri2T74lX0E33HAqANvFMmjzNFc
"""

from google.colab import drive
drive.mount('/content/drive')

# baseline model for the dogs vs cats dataset
import sys
from matplotlib import pyplot
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator
import time
import numpy as np

# define cnn model
def define_model():
	model = Sequential()
	model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(200, 200, 3)))
	model.add(MaxPooling2D((2, 2)))
	model.add(Flatten())
	model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = SGD(lr=0.001, momentum=0.9)
	model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
	return model

# plot diagnostic learning curves
def summarize_diagnostics(history):
	# plot loss
	pyplot.subplot(211)
	pyplot.title('Cross Entropy Loss')
	pyplot.plot(history.history['loss'], color='blue', label='train')
	pyplot.plot(history.history['val_loss'], color='orange', label='test')
	# plot accuracy
	pyplot.subplot(212)
	pyplot.title('Classification Accuracy')
	pyplot.plot(history.history['accuracy'], color='blue', label='train')
	pyplot.plot(history.history['val_accuracy'], color='orange', label='test')
	# save plot to file
	filename = sys.argv[0].split('/')[-1]
	pyplot.savefig(filename + '_plot.png')
	pyplot.close()


# run the test harness for evaluating a model
def run_test_harness():
    # define model
    model = define_model()
    # create data generator
    datagen = ImageDataGenerator(rescale=1.0/255.0)
    # prepare iterators
    train_it = datagen.flow_from_directory('/content/drive/MyDrive/ML_data_set/ML_after_preprocessing/train',
        class_mode='binary', batch_size=64, target_size=(200, 200))
    test_it = datagen.flow_from_directory('/content/drive/MyDrive/ML_data_set/ML_after_preprocessing/test',
        class_mode='binary', batch_size=64, target_size=(200, 200))
    predictions = model.predict(test_it)

    # print the predictions for the first 10 data points
    for i in range(20):
        print(predictions[i])
        y_pred_class = np.argmax(predictions, axis=1)
    # start timer
    start_time = time.time()

    # fit model
    history = model.fit_generator(train_it, steps_per_epoch=len(train_it),
        validation_data=test_it, validation_steps=len(train_it), epochs=20, verbose=0)
    
    # stop timer and calculate training time
    training_time = time.time() - start_time
    
    # evaluate model
    _, acc = model.evaluate_generator(train_it, steps=len(test_it), verbose=0)
    print('> %.3f' % (acc * 100.0))
    
    # get training loss
    training_loss = history.history['loss'][-1]
    
    # learning curves
    summarize_diagnostics(history)
    
    print("Training Loss:", training_loss)
    print("Training Time:", training_time, "seconds")


run_test_harness()



